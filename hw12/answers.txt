1) Когда в процессе выполнения программы нужно использовать большой набор данных,
который может быть рекурсивно сгенерирован. Чтобы сократить время выполнения
на компьютере пользоватля можно вычислить их на этапе компиляции 1 раз.
2)Если я правильно понял вопрос, речь идет о механике разрешений перегрузок:
Компилятор сканируя код и натыкаясь на вызов функции ищет все упоминания этих функций
(шаблоны, перегрузки ...) составляет из них список и последовательными удалениями
неподходящих функций (пытается вычислить аргументы шаблона, сверяет сигнатуру, из двух
подходящих шаблонов выкидывает более общий) получает либо единственную функцию
 (в случае, если функция шаблонная, инстанцирует шаблон ),
которую и будет использовать программа в этом вызове, либо получает 0 функций
(ошибка: не найдено подходящей функции),либо  несколько функций (ошибка: неоднозначная перегрузка)
3)метапрограммирование шаблонов в с++ завязано на их вычислении в процессе компиляции ->
все параметры, определяющие их работу также должны быть известны в момент компиляции
4)Идиома SFINAE для шаблонов заключается в том, что при поиске подходящей функции/класса
ошибка при вычислении параметров шаблона не будет являться ошибкой компиляции, а всего
лишь вычеркнет данную реализацию из списка возможных вариантов.
5)std::enable_if используется в основном для того чтобы запретить определенным типам
пользоваться функционалом шаблонной функции (по какому-то критерию, например по
 наличию необходимого метода или оператора).
