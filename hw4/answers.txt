1)Задать значения для данных-членов структуры можно агрегатной инициализацией
(Person Max={'name', age};), прямым обращением к полю структуры (Max.name=<name>),
внутри конструктора, с помощью списка инициализации и с помощью инициализации по
умолчанию.
2)Списки инициализации в конструкторах структур предназначены для инициализации
полей структуры при вызове конструктора. Если Присваивать полям значения
уже вннутри тела конструктор, то это не будет являться инициализацией.
3)В конструкторе выделяется память или бронируется какой-то другой ресурс, который
обязательно должен быть возвращен при удалении объекта структуры
(открытие файла например, динамическое выделение памяти), а в деструкторе
все эти ресурсы освобождаются. Это освобождает программиста от дальнейшего строгого
контроля за возвратом ресурсов и предотвращает утечки памяти, появление
незакрытых файлов.
4)Использование битовых полей и объединений стоит рассматривать при написании
кода для микроконтроллеров, обладающих ограниченным ресурсом памяти а также в
целях оптимизации (т.к побитовые операции выполняются быстрее). Кроме того
битовые маски можно использовать, например, для передачи в функцию большого
количества переменных типа bool.
5)Перечисления с областью видимости обладают локальной областью видимости.
Это значит, что чтобы обратиться к элементу перечислеия нужно использовать
оператор разрешения области видимости ::. Такая конструкция позволяет на
захломлять пространство имен, а также предотвращает возможность сравнения
элементов принадлежащих к разным пречислениям
(т.к они привязаны к целочисленным значениям )
