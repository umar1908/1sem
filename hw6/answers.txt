1)Конструктор по умолчанию
Конструктор копирования
Оператор присваивания копированием
Конструктор перемещения
Оператор присваивания перемещением
Деструктор
2)Нельзя перегружать тернарный оператор,sizeof,::, выбор члена (.)
Не рекомендуется перегружать унарный оператор & ,оператор (,)  new,new[],delete,delete[]
3)При проектировании опреаторов следует помнить о преобразовании типов. Напрмер
если у класса есть конструктор, создающий объект из double и опреатор приведения
нашего класса к типу double,то перегрузив,например,оператор сложения
&T T::operator+(const T&, const T&)
и его использовании в виде <T>+<double> возникнет неонозначность, т.к
у компилятора будет возможность как double привести к T с помощью конструктора
так и T к double с помощью опреатора приведения типов. Проблема решается оператором
explicit
4)2 основных типа gvalue(обладающие идентичносьтью) и rvalue(возможность перемещения)
gvalue состоит из lvalue (можно взять адрем - идентичность,нельзя переместить) и xvalue(могут быть перемещены и обладают идентичностью)
rvalue состоит из xvalue и prvlue (могут быть перемещены, но лишены идентичности)
5)rvalue ссылки во сносновном нужны для перегрушки функций для реализации семантики перемещения,
ну или для продления жизни временным объектам
6)Семантика перемещения выгодня тем, что экономит ресурсы в случае больших массивов данных
7)std::move() преобразовывает l-value в r-value. Нужно для принудительного
задействования конструктора перемещения и опреатора присваивания копированием
Не нужно использовать, когда выражение итак является r-value
например когда справа стоит аномимный обЪект или функция возвращает r-value
8)работа по перемещению выполняется конструктором перемещения или оператором присваивания перемещения
которые должны быть реализованы программистом (в случае создания новго типа данных)
в большинстве стандартных типах (vector и т.д) такие функции-члены уже предусмотрены
9)Когда наш класс работает с динамически выделенной памятью т.к стандарнтные
конструкртор присваивания будут выполнять копию некорректно(поверхностно)
10)default чисто декоративно чтобы явно указать, что будут использоваться конструктора
созданный компилятором по умолчанию
delete чтобы запретить компилятору создавать конструктор (например чтобы запретить копирование объектта)
